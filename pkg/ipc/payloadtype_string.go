// Code generated by "stringer -type=payloadType"; DO NOT EDIT.

package ipc

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RunCommandMessage-0]
	_ = x[GetWorkspacesMessage-1]
	_ = x[SubscribeMessage-2]
	_ = x[GetOutputsMessage-3]
	_ = x[GetTreeMessage-4]
	_ = x[GetMarksMessage-5]
	_ = x[GetBarConfigMessage-6]
	_ = x[GetVersionMessage-7]
	_ = x[GetBindingModesMessage-8]
	_ = x[GetConfigMessage-9]
	_ = x[SendTickMessage-10]
	_ = x[SyncMessage-11]
	_ = x[GetBindingStateMessage-12]
	_ = x[GetInputsMessage-100]
	_ = x[GetSeatsMessage-101]
}

const (
	_payloadType_name_0 = "RunCommandMessageGetWorkspacesMessageSubscribeMessageGetOutputsMessageGetTreeMessageGetMarksMessageGetBarConfigMessageGetVersionMessageGetBindingModesMessageGetConfigMessageSendTickMessageSyncMessageGetBindingStateMessage"
	_payloadType_name_1 = "GetInputsMessageGetSeatsMessage"
)

var (
	_payloadType_index_0 = [...]uint8{0, 17, 37, 53, 70, 84, 99, 118, 135, 157, 173, 188, 199, 221}
	_payloadType_index_1 = [...]uint8{0, 16, 31}
)

func (i payloadType) String() string {
	switch {
	case i <= 12:
		return _payloadType_name_0[_payloadType_index_0[i]:_payloadType_index_0[i+1]]
	case 100 <= i && i <= 101:
		i -= 100
		return _payloadType_name_1[_payloadType_index_1[i]:_payloadType_index_1[i+1]]
	default:
		return "payloadType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
